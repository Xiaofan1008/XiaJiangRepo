clear all;
close all;

% ------------------ Parameters ----------------- %
loaddata = true;
collect =true;
% name = 'S1E2_7elect_001'; %file name for sp
name = 'S3E2_9elect_001'; %file name for sp
% alltrials = [[5],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49]]; %which trials from sp to extract
% conditions = {['0'],['10'],['0p25'],['0p5'],['0p75'],['1p5'],['2p25'],['2p5'],['4p5'],['5'],['7p5']};
alltrials = [[5],[40]]; %which trials from sp to extract
conditions = {['0'],['10']};
% basecon = "l23";
basecon = "test1";
trialgroup = 5; %how many trials for a full ratio swing 
distance = 50; % um between shanks - starts at 0 moves down by 50um jumps
%list of locations of electrodes (spot 2 in ti row 2 = electrode 7)
e_list_S1 = [31,7,0,24,30,6,1,25,29,5,2,26,28,4,3,27,  8,16,23,15,9,17,22,14,10,18,21,13,11,19,20,12]+1; %S1 and S4
e_list_S2 = [8,11,9,15,10,19,12,23,13,22,14,21,16,20,17,18,   4,7,0,6,28,5,24,3,25,2,26,1,27,31,29,30]+33;%S2 and S3
close all

% ------------------- Load Trial & Spike Data ------------------ %
if loaddata
    ti = loadTrialInfo;
    %info for each trial 
    %stim channel (location of spike), Channel (which channel for that location)
    sp=load([name '.sp.mat'],'sp');
    %spiking data 
end

% ------------- Extract Spike Data & Plot ------------ %
if collect
    for k = 1:size(alltrials,2)
        trials = alltrials(k);
        electrodes = cell(size(trials,2),4+size(sp.sp,2));
        %for all desired trials 
        for t = 1:size(trials,2)
            %base data 
            electrodes{t,1} = trials(t); %trial id
            electrodes{t,2} = ti{trials(t)*2,2}; %first electrode location (elist index)
            electrodes{t,3} = ti{trials(t)*2+1,2}; %second electorde location (elist index)
            electrodes{t,4} = ti{trials(t)*2,18}; %the current on the first electorde - can be used to determine ratio
            %generate the data fro the trial 
            for e =1:size(e_list_S1,2)
                %get the rate based on the raster for S1 and S4 
                spikes = plotRawdata(e_list_S1(e),trials(t),'mu',1);
                % spikes = plotRawdata(e_list_S1(e),trials(t),'amplifier',1);
                electrodes{t,e+4} = spikes; % store the spike time in electrode cells 
                %graph autogenerated so close 
        
                 %get the rate based on the raster for S2 and S3
                spikes = plotRawdata(e_list_S2(e),trials(t),'mu',1);
                % spikes = plotRawdata(e_list_S2(e),trials(t),'amplifier',1);
                electrodes{t,e+4+32} = spikes;
                %graph autogenerated so close 
        
            end
        end
        % save("output_elec_"+basecon+"_"+conditions{k}+".mat","electrodes");
    end
end

%% Plot

% ---- Spike Activity Historgam across trials ---- %
% ypoint = 0:0.01:200; % bin index = 0.01
% xpoint = zeros(size(ypoint));
% offset = 100/0.01;
figure(101)
set(gca,'LooseInset',get(gca,'TightInset'))
step = 0.01;
% ypoint = 0:step:200; % bin index = 0.01
ypoint = -100:step:100; % bin index = 0.01
xpoint = zeros(size(ypoint));
offset = 100/step;
for e =5:size(electrodes,2)
    data = electrodes{1,e};
    for t = 1:size(data,2)
        %go through each item and add 1 to the x point if there is a spike at that point  
        values = data{t};
        for i = 1:size(values,2)
            item = values(i);
            % xpoint(round(item/0.01)+offset) = xpoint(round(item/0.01)+offset)+1;
            xpoint(round(item/step)+offset) = xpoint(round(item/step)+offset)+1;
            % round(item/0.01) convert spike time into an index form
            % (0.01 per bin)
            % + offset make spike center the spike in the historgam. 
        end
    end
    plot(ypoint,xpoint);
end
xlabel('Time (ms)');
ylabel('Firing Rate (spikes/s)');

% Define time bins for PSTH
bin_size = 0.01; % Bin size in ms (adjustable)
time_range = [-100, 100]; % Define PSTH time range in ms
% time_range = [0, 200]; % Define PSTH time range in ms
ypoint = time_range(1):bin_size:time_range(2); % Define bin edges
xpoint = zeros(size(ypoint)); % Initialize spike count array

% Offset to prevent negative indexing
% offset = abs(time_range(1)) / bin_size; 
offset = 100/ bin_size; 
% Loop through electrodes and trials to collect spike counts
for e = 5:size(electrodes,2) % Start from column 5 (spike data)
    data = electrodes{1,e}; % Get electrode spike data
    for t = 1:size(data,2) % Loop over trials
        values = data{t}; % Spike times for this trial
        for i = 1:size(values,2) % Loop over individual spikes
            item = values(i);
            bin_index = round(item / bin_size) + offset;
            % if bin_index > 0 && bin_index <= length(xpoint)
                xpoint(bin_index) = xpoint(bin_index) + 1; % Increment spike count
            % end
        end
    end
end

% % Convert spike count to firing rate (spikes per second)
% num_trials = size(electrodes{1,5},2); % Number of trials used
% xpoint = (xpoint / num_trials) * (1000 / bin_size); % Normalize to spikes per second

figure(102);
bar(ypoint, xpoint, 'k', 'BarWidth', 1); % Black bars for spikes
hold on;
xlabel('Time (ms)');
ylabel('Firing Rate (spikes/s)');
title('Peri-Stimulus Time Histogram (PSTH)');
xline(0, '--r', 'LineWidth', 2); % Red dashed line at stimulus onset
set(gca, 'FontSize', 12);

% Optional: Apply Gaussian smoothing to PSTH
smooth_psth = smoothdata(xpoint, 'gaussian', 5); % Adjust the window size as needed
plot(ypoint, smooth_psth, 'r', 'LineWidth', 2); % Overlay smoothed PSTH in red
legend('Raw PSTH', 'Smoothed PSTH');

% ------------------- Color Plot ----------------- %
% Initialize firing rate matrix
num_electrodes = length(e_list_S1) + length(e_list_S2); % Total number of electrodes
firing_rates = zeros(num_electrodes,1);
win = 90/1000; % 200ms window for spike rate 
% Compute the firing rates for each electrode
for e = 5:size(electrodes,2)
    data = electrodes{1,e};
    if isempty(data) % skip empty electrodes
        firing_rates(e-4) = NaN; % mark as NaN to exclude from visualization
        continue;
    end

    num_trials = length(data);
    total_spikes = 0; % initialize spike count
    for t = 1:num_trials
        if ~isempty(data{t})
            total_spikes = total_spikes + length(data{t}); % sum spike across trials
        end
    end

    % compute firing rate in spikes per second (Hz)
    firing_rates(e-4) = (total_spikes/num_trials)/(win); % normalize to spike/sec (200ms window) 
end
% Normalize firing rates using Min-Max scaling
valid_rates = firing_rates(~isnan(firing_rates)); % exclude NaN values
firing_rates = (firing_rates - min(valid_rates)) / (max(valid_rates) - min(valid_rates));

% reshape into a grid for visualization ( 2D array layout)
grid_rows = 16;
grid_cols = 4; 

firing_rate_grid = zeros(grid_rows,grid_cols);

firing_rate_grid(:,1) = firing_rates(1:16); % S1
firing_rate_grid(:,2) = firing_rates(33:48); % S2
firing_rate_grid(:,3) = firing_rates(17:32); % S3
firing_rate_grid(:,4) = firing_rates(49:64); % S4

% colormap function
% Plot heatmap of electrode firing rates
figure(103)
imagesc(firing_rate_grid); % Display as image (color map)
colormap(turbo); 
colorbar; % Add color scale
% caxis([prctile(valid_rates, 5), prctile(valid_rates, 95)]); 
xlabel('Electrode Shank Group (S1 | S2 | S3 | S4)');
ylabel('Electrode Y Position');
title('Electrode Firing Rate Heatmap (spikes/sec)', 'FontSize', 16, 'FontWeight', 'bold');
set(gca, 'FontSize', 12, 'XTick', 1:4, 'XTickLabel', {'S1', 'S2', 'S3', 'S4'}, ...
         'YTick', 1:16, 'YDir', 'normal'); % Ensure correct orientation

% Add grid lines for clarity
hold on;
for x = 0.5:1:grid_cols+0.5
    plot([x x], [0.5 grid_rows+0.5], 'k-', 'LineWidth', 1);
end
for y = 0.5:1:grid_rows+0.5
    plot([0.5 grid_cols+0.5], [y y], 'k-', 'LineWidth', 1);
end
hold off;

% heatmap function
% Define row and column labels
row_labels = flip(string(1:16));  % Electrode positions (flip to match heatmap order)
col_labels = ["S1", "S2", "S3", "S4"]; % Shank labels

% Create heatmap with correct syntax
figure(104);
h = heatmap(col_labels, row_labels, firing_rate_grid);
h.Colormap = turbo; % Use high-contrast colormap
% h.MissingDataColor = [0.8 0.8 0.8]; % Gray out missing data (NaNs)
h.Title = 'Electrode Firing Rate Heatmap (spikes/sec)';
h.XLabel = 'Electrode Shank Group (S1 | S2 | S3 | S4)';
h.YLabel = 'Electrode Position (1-16)';
h.FontSize = 12;
% Show actual firing rate values on heatmap
h.CellLabelFormat = '%.2f'; % Show values rounded to 2 decimal places
